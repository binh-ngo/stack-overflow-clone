schema {
    query: Query
    mutation: Mutation
}
  type Query {
    getAllQuestions(author: String!): [Question] 
    getAllQuestionsFromAllUsers: [Question]
    getQuestionById(author: String!, quesId: String!): Question
    # getAllAnswers(author: String!): [Answer] 
    # getAnswerById(author: String!, ansId: String!): Answer

    # getAllComments(author: String!): [Comment] 
    # getCommentById(author: String!, commId: String!): Comment

    # getUser(username: String!): User!
    # getAllUsers: [UserList]!
    # getAllTags: [Tag]!
  }

# @aws_cognito_user_pools AppSync directive to specify that the field should be AMAZON_COGNITO_USER_POOLS authorized.
# everything else is authorized by the API Key
  type Mutation {

    createQuestion(question: QuestionInput): Question @aws_cognito_user_pools
    deleteQuestion(author: String!, quesId: String!): String @aws_cognito_user_pools
    updateQuestion(
      author: String!
      quesId: String!
      question: QuestionInput!
    ): Question @aws_cognito_user_pools

    voteQuestion(quesId: String!, voteType: VoteType!): Question! @aws_cognito_user_pools

    # TODO: answer lambdas for crud functionality
    createAnswer(quesId: String!, answer: AnswerInput): Answer @aws_cognito_user_pools
    deleteAnswer(author: String!, ansId: String!): String @aws_cognito_user_pools
    updateAnswer(
      author: String!
      ansId: String!
      answer: AnswerInput!
    ): Question @aws_cognito_user_pools
    
    voteAnswer(quesId: String!, ansId: String!, voteType: VoteType!): Answer!
    acceptAnswer(quesId: String!, ansId: String!): Question!
    
    # TODO: comment lambdas for crud functionality
    createComment(parentId: String!, comment: CommentInput): Comment @aws_cognito_user_pools
    deleteComment(parentId: String!, commId: String!): String! @aws_cognito_user_pools
    updateComment(
      author: String!,
      commId: String!, 
      comment: CommentInput!
    ): Comment @aws_cognito_user_pools
  }


  enum RoleType {
    USER
    ADMIN
  }

  enum VoteType {
    UPVOTE
    DOWNVOTE
  }

  enum SortByType {
    HOT
    VOTES
    VIEWS
    NEWEST
    OLDEST
  }

  enum OrderDirection {
  ASC
  DESC
}

  scalar AWSDateTime

  type QuestionRep {
    quesId: ID!
    rep: Int!
  }

  type AnswerRep {
    ansId: ID!
    rep: Int!
  }

  type RecentActivity {
    id: ID!
    title: String!
    points: Int!
    createdAt: AWSDateTime!
  }

  type User {
    id: ID!
    username: String!
    imageUrl: AWSURL
    role: RoleType!
    questions: [QuestionRep]!
    answers: [AnswerRep]!
    createdAt: AWSDateTime!
    reputation: Int!
    recentQuestions: [RecentActivity]!
    recentAnswers: [RecentActivity]!
    totalQuestions: Int!
    totalAnswers: Int!
  }

  type UserList {
    id: ID!
    username: String!
    createdAt: AWSDateTime!
  }

  type Comment @aws_api_key @aws_cognito_user_pools {
    commId: ID!
    parentId: ID!
    author: String!
    body: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type Answer @aws_api_key @aws_cognito_user_pools {
    ansId: ID!
    quesId: ID!
    author: String!
    body: String!
    comments: [Comment]!
    points: Int!
    upvotedBy: [ID]!
    downvotedBy: [ID]!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type QuestionList {
    quesId: ID!
    author: String!
    title: String!
    body: String!
    tags: [String!]!
    points: Int!
    views: Int!
    answers: [Answer]!
    answerCount: Int!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type Question @aws_api_key @aws_cognito_user_pools  {
    quesId: ID!
    author: String!
    title: String!
    body: String!
    tags: [String!]!
    points: Int!
    views: Int!
    acceptedAnswer: ID
    comments: [Comment]!
    answers: [Answer]!
    upvotedBy: [ID]!
    downvotedBy: [ID]!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type NextPrevPage {
    page: Int!
    limit: Int!
  }

  type PaginatedQuesList {
    questions: [QuestionList]!
    next: NextPrevPage
    previous: NextPrevPage
  }

  type Tag {
    tagName: String!
    count: Int!
  }

  input QuestionInput {
    title: String!
    body: String!
    author: String!
    tags: [String]!
}

input AnswerInput {
  body: String!
  author: String!
}
input CommentInput  {
    body: String!;
    author: String!;
}

input OrderByInput {
  field: String!
  order: OrderDirection!
}