schema {
    query: Query
    mutation: Mutation
}
  type Query {
    getAuthorById(author: String!): Author!

    getAllQuestions(author: String!): [Question] 
    getAllQuestionsFromAllUsers: [Question]
    getQuestionById(author: String!, quesId: String!): Question

    getAllAnswers(quesId: String!): [Answer] 
    getAnswerById(author: String!, ansId: String!): Answer

    getTagById(tagName: String!): Tag
    getAllTags: [Tag]
    getAllQuestionsByTag(tagName: String!): [Question]
    
    # getAllComments(author: String!): [Comment] 
    # getCommentById(author: String!, commId: String!): Comment

    # getUser(username: String!): User!
    # getAllUsers: [UserList]!
    
  }

# @aws_cognito_user_pools AppSync directive to specify that the field should be AMAZON_COGNITO_USER_POOLS authorized.
# everything else is authorized by the API Key
  type Mutation {
    createAuthor(authorInput: AuthorInput): Author @aws_cognito_user_pools
    deleteAuthor(author: String!, id: String!): String @aws_cognito_user_pools

    createQuestion(question: QuestionInput): Question @aws_cognito_user_pools
    deleteQuestion(author: String!, quesId: String!): String @aws_cognito_user_pools
    updateQuestion(
      author: String!
      quesId: String!
      question: QuestionInput!
    ): Question @aws_cognito_user_pools

    voteQuestion(quesId: String!, voteType: VoteType!): Question! @aws_cognito_user_pools

    # TODO: answer lambdas for crud functionality
    createAnswer(answer: AnswerInput): Answer @aws_cognito_user_pools
    # appendAnswer(quesAuthor: String!, quesId: String!, answer: AnswerInput): Answer @aws_cognito_user_pools
    deleteAnswer(author: String!, ansId: String!): String @aws_cognito_user_pools
    updateAnswer(
      author: String!
      ansId: String!
      answer: AnswerInput!
    ): Answer @aws_cognito_user_pools
    
    voteAnswer(quesId: String!, ansId: String!, voteType: VoteType!): Answer!
    acceptAnswer(quesId: String!, ansId: String!): Question!
    
    # TODO: comment lambdas for crud functionality
    createComment(parentId: String!, comment: CommentInput): Comment @aws_cognito_user_pools
    deleteComment(parentId: String!, commId: String!): String! @aws_cognito_user_pools
    updateComment(
      author: String!,
      commId: String!, 
      comment: CommentInput!
    ): Comment @aws_cognito_user_pools  

    createTag(question: QuestionInput): Tag @aws_cognito_user_pools
  }
  

  enum RoleType {
    USER
    ADMIN
  }

  enum VoteType {
    UPVOTE
    DOWNVOTE
  }

  enum SortByType {
    HOT
    VOTES
    VIEWS
    NEWEST
    OLDEST
  }

  enum OrderDirection {
  ASC
  DESC
}

  scalar AWSDateTime

  type QuestionRep {
    quesId: ID!
    rep: Int!
  }

  type AnswerRep {
    ansId: ID!
    rep: Int!
  }

  type RecentActivity {
    id: ID!
    title: String!
    points: Int!
    createdAt: AWSDateTime!
  }
  type Author {
    id: ID!
    author: String!
    totalQuestions: Int!
    totalAnswers: Int!
    createdAt: String!
  }

  input AuthorInput {
    id: String!
    author: String!
  }

  type Comment @aws_api_key @aws_cognito_user_pools {
    commId: ID!
    parentId: ID!
    author: String!
    body: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type Answer @aws_api_key @aws_cognito_user_pools {
    ansId: ID!
    author: String!
    quesId: ID!
    quesAuthor: String!
    body: String!
    points: Int!
    upvotedBy: [ID]
    downvotedBy: [ID]
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type Question @aws_api_key @aws_cognito_user_pools  {
    quesId: ID!
    author: String!
    title: String!
    body: String!
    tags: [String]
    points: Int!
    views: Int!
    acceptedAnswer: ID
    upvotedBy: [ID]!
    downvotedBy: [ID]!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

  type Tag {
    tagName: String!
    count: Int!
    tagId: String!
  }

  input QuestionInput {
    title: String!
    body: String!
    author: String
    tags: [String]
}

input AnswerInput {
  body: String!
  answerAuthor: String!
  quesId: String!
  quesAuthor: String!
}
input CommentInput  {
    body: String!;
    author: String!;
}
